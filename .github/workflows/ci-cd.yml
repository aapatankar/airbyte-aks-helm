name: Airbyte AKS Helm Chart CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
    - 'airbyte-aks-helm/**'
  pull_request:
    branches: [ main ]
    paths:
    - 'airbyte-aks-helm/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging  
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  HELM_VERSION: '3.12.0'
  KUBECTL_VERSION: '1.28.0'
  CHART_PATH: 'airbyte-aks-helm'

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Add Helm repositories
      run: |
        helm repo add airbyte-v2 https://airbytehq.github.io/charts
        helm repo update
        
    - name: Update chart dependencies
      working-directory: ${{ env.CHART_PATH }}
      run: helm dependency update
      
    - name: Lint Helm chart
      working-directory: ${{ env.CHART_PATH }}
      run: |
        echo "Linting with development values..."
        helm lint . --values values-development.yaml
        echo "Linting with production values..."
        helm lint . --values values-production.yaml
        
    - name: Template validation
      working-directory: ${{ env.CHART_PATH }}
      run: |
        echo "Validating development templates..."
        helm template airbyte . --values values-development.yaml --output-dir /tmp/dev-templates
        echo "Validating production templates..."
        helm template airbyte . --values values-production.yaml --output-dir /tmp/prod-templates
        
    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval for manifest validation
        curl -sSL https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
        
        # Validate development manifests
        find /tmp/dev-templates -name "*.yaml" -exec kubeval {} \;
        
        # Validate production manifests  
        find /tmp/prod-templates -name "*.yaml" -exec kubeval {} \;
        
    - name: Security scan with Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.CHART_PATH }}/templates
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-results.sarif
        
    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif

  test-deployment:
    needs: lint-and-validate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s-version: ['1.26.0', '1.27.0', '1.28.0']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
        
    - name: Create Kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        version: v0.20.0
        node_image: kindest/node:v${{ matrix.k8s-version }}
        cluster_name: airbyte-test-${{ matrix.k8s-version }}
        
    - name: Add Helm repositories
      run: |
        helm repo add airbyte-v2 https://airbytehq.github.io/charts
        helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
        helm repo update
        
    - name: Install NGINX Ingress
      run: |
        helm install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx \
          --create-namespace \
          --set controller.service.type=NodePort \
          --wait
          
    - name: Deploy Airbyte (Development)
      working-directory: ${{ env.CHART_PATH }}
      run: |
        helm dependency update
        helm install airbyte . \
          --namespace airbyte \
          --create-namespace \
          --values values-development.yaml \
          --wait \
          --timeout 10m
          
    - name: Run health checks
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x health-check.sh
        ./health-check.sh
        
    - name: Test functionality
      run: |
        # Wait for all pods to be ready
        kubectl wait --for=condition=ready pod --all -n airbyte --timeout=300s
        
        # Test port forwarding
        kubectl port-forward -n airbyte service/airbyte-webapp 8080:80 &
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8080/health || (echo "Health check failed" && exit 1)
        
        # Stop port forwarding
        pkill -f "port-forward" || true
        
    - name: Cleanup
      if: always()
      run: |
        helm uninstall airbyte -n airbyte || true
        kubectl delete namespace airbyte || true

  security-scan:
    needs: lint-and-validate
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: ${{ env.CHART_PATH }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  package-chart:
    needs: [lint-and-validate, test-deployment]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Package Helm chart
      working-directory: ${{ env.CHART_PATH }}
      run: |
        helm dependency update
        helm package .
        
    - name: Upload chart package
      uses: actions/upload-artifact@v3
      with:
        name: helm-chart-package
        path: ${{ env.CHART_PATH }}/*.tgz
        retention-days: 30

  deploy-development:
    needs: [lint-and-validate, test-deployment]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ vars.AKS_RESOURCE_GROUP_DEV }} \
          --name ${{ vars.AKS_CLUSTER_NAME_DEV }}
          
    - name: Deploy to Development
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x deploy.sh
        ./deploy.sh install -e development --wait
        
    - name: Run post-deployment tests
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x health-check.sh
        ./health-check.sh
        
  deploy-staging:
    needs: [lint-and-validate, test-deployment, package-chart]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ vars.AKS_RESOURCE_GROUP_STAGING }} \
          --name ${{ vars.AKS_CLUSTER_NAME_STAGING }}
          
    - name: Create backup before deployment
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x migrate.sh
        ./migrate.sh backup || echo "No existing deployment to backup"
        
    - name: Deploy to Staging
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x deploy.sh
        ./deploy.sh upgrade -e production --wait || ./deploy.sh install -e production --wait
        
    - name: Run post-deployment validation
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x migrate.sh
        ./migrate.sh validate
        
  deploy-production:
    needs: [deploy-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
        
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}
        
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}
        
    - name: Get AKS credentials
      run: |
        az aks get-credentials \
          --resource-group ${{ vars.AKS_RESOURCE_GROUP_PROD }} \
          --name ${{ vars.AKS_CLUSTER_NAME_PROD }}
          
    - name: Create backup before deployment
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x migrate.sh
        ./migrate.sh backup
        
    - name: Deploy to Production
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x deploy.sh
        ./deploy.sh upgrade -e production --wait
        
    - name: Run post-deployment validation
      working-directory: ${{ env.CHART_PATH }}
      run: |
        chmod +x migrate.sh
        ./migrate.sh validate
        
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        channel: '#deployments'
        text: 'Airbyte production deployment completed successfully!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#deployments'
        text: 'Airbyte production deployment failed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    if: always()
    needs: [test-deployment]
    steps:
    - name: Cleanup test artifacts
      run: |
        echo "Cleaning up test artifacts and temporary files"
        # Add any cleanup commands here
